CS224 Lab 3
Sec 5, Suleyman Hanyyev
21901009

This is my work for the parts 1,2 and 3:


# CS224 Lab 3 part 3
# Suleyman Hanyyev 21901009
# 03/03
# Reverse Linked List using Recursion
# Prints the data in the nodes in reverse, from last node to first


.text
# CS224 Spring 2021, Program to be used in Lab3
# February 23, 2021
# 
	li	$a0, 10 	#create a linked list with 10 nodes
	jal	createLinkedList
	
# Linked list is pointed by $v0
	move	$a0, $v0	# Pass the linked list address in $a0
	jal 	printLinkedList
	
# Stop. 
	li	$v0, 10
	syscall

createLinkedList:
# $a0: No. of nodes to be created ($a0 >= 1)
# $v0: returns list head
# Node 1 contains 4 in the data field, node i contains the value 4*i in the data field.
# By 4*i inserting a data value like this
# when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
	addi	$sp, $sp, -20
	sw	$s0, 16($sp)
	sw	$s1, 12($sp)
	sw	$s2, 8($sp)
	sw	$s3, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter
# Create the first node: header.
# Each node is 8 bytes: link field then data field.
	li	$a0, 8
	li	$v0, 9
	syscall
# OK now we have the list head. Save list head pointer 
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.	
# sll: So that node 1 data value will be 4, node i data value will be 4*i
	sw	$s1, 4($s2)	# Store the data value.
	
addNode:
# Are we done?
# No. of nodes created compared with the number of nodes to be created.
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
# Connect the this node to the lst node pointed by $s2.
	sw	$v0, 0($s2)
# Now make $s2 pointing to the newly created node.
	move	$s2, $v0	# $s2 now points to the new node.	
# sll: So that node 1 data value will be 4, node i data value will be 4*i
	sw	$s1, 4($s2)	# Store the data value.
	j	addNode
allDone:
# Make sure that the link field of the last node cotains 0.
# The last node is pointed by $s2.
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).
	
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s3, 4($sp)
	lw	$s2, 8($sp)
	lw	$s1, 12($sp)
	lw	$s0, 16($sp)
	addi	$sp, $sp, 20
	
	jr	$ra
#=========================================================
printLinkedList:

# Storing the ra and s registers that I am going to use
	addi $sp, $sp, -16
	sw $ra, 0($sp)
	sw $a0, 4($sp)
	sw $s0, 8($sp)
	sw $s1, 12($sp)
	
	

	lw $s0, 0($a0) 		# This will be the next node
	lw $s1, 4($a0)		#This will be the data
	
	beq $s0, $0, last
	
	move $a0, $s0
	jal printLinkedList
	
	printNode:
# Output desing + data of node
	li $v0, 4
	la $a0, dataValueOfCurrentNode
	syscall
	
	li $v0, 1
	add $a0, $0, $s1
	syscall
	
	li $v0, 4
	la $a0, line
	syscall
	
# Load ra and registers back
	lw $ra, 0($sp)
	lw $a0, 4($sp)
	lw $s0, 8($sp)
	lw $s1, 12($sp)
	addi $sp, $sp, 16
	jr $ra
	
	last:
# Design plus print the node's data
	li $v0, 4
	la $a0, dataValueOfCurrentNode
	syscall
	
	li $v0, 1
	add $a0, $0, $s1
	syscall
	
	li $v0, 4
	la $a0, line
	syscall
	
# Load ra and registers back
	lw $ra, 0($sp)
	lw $a0, 4($sp)
	lw $s0, 8($sp)
	lw $s1, 12($sp)
	
	addi $sp, $sp, 16
	jr $ra
#=========================================================		
	.data
line:	
	.asciiz "\n --------------------------------------"

nodeNumberLabel:
	.asciiz	"\n Node No.: "
	
addressOfCurrentNodeLabel:
	.asciiz	"\n Address of Current Node: "
	
addressOfNextNodeLabel:
	.asciiz	"\n Address of Next Node: "
	
dataValueOfCurrentNode:
	.asciiz	"\n Data Value of Current Node: "


This is part 4
# CS 224 Lab 3 part 4
# Suleymaaan Hanyyev
# 03/03

	.text
# CS224 Spring 2021, Program to be used in Lab3
# February 23, 2021
#
	li	$a0, 10 	#create a linked list with 10 nodes
	jal	createLinkedList

# Linked list is pointed by $v0
	move	$a0, $v0	# Pass the linked list address in $a0
	jal 	DuplicateListIterative


# Stop.
	li	$v0, 10
	syscall

createLinkedList:
# $a0: No. of nodes to be created ($a0 >= 1)
# $v0: returns list head
# Node 1 contains 4 in the data field, node i contains the value 4*i in the data field.
# By 4*i inserting a data value like this
# when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter
# Create the first node: header.
# Each node is 8 bytes: link field then data field.
	li	$a0, 8
	li	$v0, 9
	syscall
# OK now we have the list head. Save list head pointer
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.
	sll	$s4, $s1, 2
# sll: So that node 1 data value will be 4, node i data value will be 4*i
	sw	$s4, 4($s2)	# Store the data value.

addNode:
# Are we done?
# No. of nodes created compared with the number of nodes to be created.
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
# Connect the this node to the lst node pointed by $s2.
	sw	$v0, 0($s2)
# Now make $s2 pointing to the newly created node.
	move	$s2, $v0	# $s2 now points to the new node.
	sll	$s4, $s1, 2
# sll: So that node 1 data value will be 4, node i data value will be 4*i
	sw	$s4, 4($s2)	# Store the data value.
	j	addNode
allDone:
# Make sure that the link field of the last node cotains 0.
# The last node is pointed by $s2.
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).

# Restore the register values
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24

	jr	$ra
#=========================================================
DuplicateListIterative:
	addi $sp, $sp, -20
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)

	add $s0, $0, $a0	#s0 has the address of the array
	beqz $s0, empty

	createNode:

# If the next pointer of a0 is null, then we finished the loop

	lw $s1, 4($a0)		# s1 has the data
	beqz $a0, done

# Creation of the new linked list

	li $a0, 8
	li $v0, 9
	syscall

	add $s2, $0, $v0	# s2 has the address of the created list
	add $s3, $0, $v0	# s3 is the head pointer

# Initialization, or copying the data from one ll to another

	sw $s1, 4($s2)
	sw $0, 0($s2) 		# copy the head data and next pointer to the new linked list

	addi $sp, $sp, -4
	sw $s3, 0($sp)		# I want to store the s3, or base address of LL to the stack so i won't lose it

	addi $a0, $0, 12	# moving to the next pointer

	nextNode:
	beqz $a0, done

# Creation of the new node

	li $a0, 8
	li $v0, 9
	syscall

# Initialization, or copying the data from one ll to another

	sw $s1, 0($v0)
	sw $0, 4($v0)
	sw $v0, 4($s2) 		# copy the head data and next pointer to the new linked list

	addi $s2, $s2, 12
	add $a0, $0, $s4
	j nextNode

# Items Copied, pass it to a0 and done
	done:
	lw $s3, 0($sp)
	addi $sp, $sp, 4

# Duplicate Created and added
	li $v0, 4
	la $a0, linkedListCreated
	syscall
	add $a0, $0, $s3

#Return elements from stack
	lw $s0, 0($sp)
	lw $s1, 4($sp)
	lw $s2, 8($sp)
	lw $s3, 12($sp)
	lw $s4, 16($sp)
	addi $sp , $sp, 20

	jr $ra

empty:
	lw $s0, 0($sp)
	lw $s1, 4($sp)
	lw $s2, 8($sp)
	lw $s3, 12($sp)
	lw $s4, 16($sp)
	addi $sp , $sp, 20
	li $v0, 4
	la $a0, emptyList
	syscall
	jr $ra

	#=========================================================
	.data
line:
	.asciiz "\n --------------------------------------"

emptyList: .asciiz "\nThere are no elements in the linked list"
linkedListCreated: .asciiz "\nLinked List has been copied"


Finally, part 5
# CS 224 Lab 3 part 4
# Suleymaaan Hanyyev
# 03/03

	.text
# CS224 Spring 2021, Program to be used in Lab3
# February 23, 2021
#
	li	$a0, 10 	#create a linked list with 10 nodes
	jal	createLinkedList

# Linked list is pointed by $v0
	move	$a0, $v0	# Pass the linked list address in $a0
	jal 	DuplicateListRecursive


# Stop.
	li	$v0, 10
	syscall

createLinkedList:
# $a0: No. of nodes to be created ($a0 >= 1)
# $v0: returns list head
# Node 1 contains 4 in the data field, node i contains the value 4*i in the data field.
# By 4*i inserting a data value like this
# when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter
# Create the first node: header.
# Each node is 8 bytes: link field then data field.
	li	$a0, 8
	li	$v0, 9
	syscall
# OK now we have the list head. Save list head pointer
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.

# sll: So that node 1 data value will be 4, node i data value will be 4*i
	sw	$s1, 4($s2)	# Store the data value.

addNode:
# Are we done?
# No. of nodes created compared with the number of nodes to be created.
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
# Connect the this node to the lst node pointed by $s2.
	sw	$v0, 0($s2)
# Now make $s2 pointing to the newly created node.
	move	$s2, $v0	# $s2 now points to the new node.
# sll: So that node 1 data value will be 4, node i data value will be 4*i
	sw	$s1, 4($s2)	# Store the data value.
	j	addNode
allDone:
# Make sure that the link field of the last node cotains 0.
# The last node is pointed by $s2.
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).

# Restore the register values
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24

	jr	$ra
#=========================================================
DuplicateListRecursive:
	addi $sp, $sp, -24
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	sw $ra, 20($sp)

	add $s0, $0, $a0	#s0 has the address of the array
	beqz $s0, empty

	createNode:
# If the next pointer of a0 is null, then we finished the loop
	lw $s1, 4($s0)		# s1 has the data

# Creation of the new linked list
	li $a0, 8
	li $v0, 9
	syscall

	add $s2, $0, $v0	# s2 has the address of the created list
	add $s3, $0, $v0	# s3 is the head pointer

# Initialization, or copying the data from one ll to another

	sw $0, 0($v0)
	sw $s1, 4($v0) 		# copy the head data and set next pointer to 0 in the new linked list

	lw $s0, 0($s0)		# the old pointer points to the next
	jal recursive

# Items Copied, pass it to a0 and done
	done:
# Duplicate Created and added
	li $v0, 4
	la $a0, linkedListCreated
	syscall
	add $a0, $0, $s3
#Return elements from stack
	lw $s0, 0($sp)
	lw $s1, 4($sp)
	lw $s2, 8($sp)
	lw $s3, 12($sp)
	lw $s4, 16($sp)
	lw $ra, 20($sp)
	addi $sp , $sp, 24
	jr $ra

recursive:
	add $a0, $0, $s0
	addi $sp, $sp, -4
	sw $ra, 0($sp)

	beqz $a0, basecase
	lw $s1, 4($a0)

#Creating New Node
	li $a0, 8
	li $v0, 9
	syscall

	sw $0, 0($v0)
	sw $s1, 4($v0)
	sw $v0, 0($s2)	# update the next pointer in the new ll

# Updating the pointer of the duplicated list and pointing to the next node in the old one
	lw $s0, 0($s0)
	addi $s2, $s2, 8
	jal recursive

# Return from the stack and go back to DisplayRecursive
	lw $ra, 0($sp)
	addi $sp, $sp, 4

	jr $ra

basecase:
	addi $sp, $sp, 4
	jr $ra

empty:
	lw $s0, 0($sp)
	lw $s1, 4($sp)
	lw $s2, 8($sp)
	lw $s3, 12($sp)
	lw $s4, 16($sp)
	lw $ra, 20($sp)
	addi $sp , $sp, 24
	li $v0, 4
	la $a0, emptyList
	syscall
	jr $ra

#=========================================================
	.data
line:
	.asciiz "\n --------------------------------------"

emptyList: .asciiz "\nThere are no elements in the linked list"
linkedListCreated: .asciiz "\nLinked List has been copied"

